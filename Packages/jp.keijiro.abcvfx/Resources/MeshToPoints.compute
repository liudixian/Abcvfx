#pragma kernel Convert

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl"

uint IndexCount;
StructuredBuffer<uint> Indices;
StructuredBuffer<float> Positions;
StructuredBuffer<float> TexCoords;
Texture2D BaseTexture;

RWTexture2D<float4> PositionMap;
RWTexture2D<float4> NormalMap;
RWTexture2D<float4> ColorMap;

// Input retrieval functions
float3 GetPosition(int index)
{
    return float3(Positions[index * 3 + 0],
                  Positions[index * 3 + 1],
                  Positions[index * 3 + 2]);
}

float2 GetTexCoords(int index)
{
    return float2(TexCoords[index * 2 + 0],
                  TexCoords[index * 2 + 1]);
}

[numthreads(8, 8, 1)]
void Convert(uint2 id : SV_DispatchThreadID)
{
    // Random seed
    uint seed = id.x + id.y * 1024;

    // Random triangle selection
    uint ti = JenkinsHash(seed) % (IndexCount / 3) * 3;

    // Triangle indices
    uint i1 = Indices[ti + 0];
    uint i2 = Indices[ti + 1];
    uint i3 = Indices[ti + 2];

    // Vertex retrieval
    float3 p1 = GetPosition(i1);
    float3 p2 = GetPosition(i2);
    float3 p3 = GetPosition(i3);

    float2 uv1 = GetTexCoords(i1);
    float2 uv2 = GetTexCoords(i2);
    float2 uv3 = GetTexCoords(i3);

    float3 pc = (p1 + p2 + p3) / 3;
    float2 uvc = (uv1 + uv2 + uv3) / 3;
    float3 n = normalize(cross(p2 - p1, p3 - p1));

    uint tw, th;
    BaseTexture.GetDimensions(tw, th);
    uint2 sp = float2(uvc.x, uvc.y) * uint2(tw, th) + 0.5;  //fix the color index erro for abc file
    float4 c = LinearToSRGB(BaseTexture[sp]);

    // Output
    PositionMap[id] = float4(pc, 1);
    NormalMap[id] = float4(n, 0);
    ColorMap[id] = c;
}
